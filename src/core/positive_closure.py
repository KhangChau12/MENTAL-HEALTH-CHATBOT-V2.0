# positive_closure.py
"""
Positive Closure System - H·ªá th·ªëng ƒë√≥ng g√≥i t√≠ch c·ª±c cu·ªôc tr√≤ chuy·ªán
Khi AI kh√¥ng ph√°t hi·ªán v·∫•n ƒë·ªÅ nghi√™m tr·ªçng sau m·ªôt s·ªë tin nh·∫Øn nh·∫•t ƒë·ªãnh
"""

import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class ClosureConfig:
    """Configuration cho positive closure system"""
    # S·ªë tin nh·∫Øn t·ªëi thi·ªÉu tr∆∞·ªõc khi c√≥ th·ªÉ closure
    min_messages_for_closure: int = 6
    
    # S·ªë tin nh·∫Øn t·ªëi ƒëa tr∆∞·ªõc khi force closure (tr√°nh v√≤ng l·∫∑p v√¥ t·∫≠n)
    max_messages_before_closure: int = 12
    
    # Threshold cho low severity ƒë·ªÉ k√≠ch ho·∫°t closure
    low_severity_threshold: float = 0.3
    
    # S·ªë tin nh·∫Øn li√™n ti·∫øp c√≥ severity th·∫•p ƒë·ªÉ trigger closure
    consecutive_low_severity_count: int = 3
    
    # Confidence threshold ƒë·ªÉ ƒë·∫£m b·∫£o AI ph√¢n t√≠ch ch√≠nh x√°c
    min_confidence_for_closure: float = 0.6

class PositiveClosureManager:
    """Qu·∫£n l√Ω vi·ªác ƒë√≥ng g√≥i t√≠ch c·ª±c cu·ªôc tr√≤ chuy·ªán"""
    
    def __init__(self, config: Optional[ClosureConfig] = None):
        self.config = config or ClosureConfig()
        
        # Closure message templates
        self.closure_templates = {
            'general_reassurance': [
                "Qua nh·ªØng g√¨ ch√∫ng ta ƒë√£ tr√≤ chuy·ªán, t√¥i th·∫•y b·∫°n c√≥ v·∫ª ƒëang x·ª≠ l√Ω t·ªët nh·ªØng c·∫£m x√∫c c·ªßa m√¨nh. ƒêi·ªÅu n√†y th·∫≠t tuy·ªát v·ªùi! üòä",
                "D·ª±a tr√™n cu·ªôc tr√≤ chuy·ªán c·ªßa ch√∫ng ta, t√¥i kh√¥ng th·∫•y b·∫°n c√≥ d·∫•u hi·ªáu nghi√™m tr·ªçng n√†o v·ªÅ s·ª©c kh·ªèe t√¢m th·∫ßn. ƒê√¢y l√† tin t·ªët!",
                "T√¥i c√≥ th·ªÉ th·∫•y r·∫±ng b·∫°n ƒëang kh√° ·ªïn ƒë·ªãnh v·ªÅ m·∫∑t tinh th·∫ßn. Nh·ªØng c·∫£m x√∫c b·∫°n chia s·∫ª l√† ho√†n to√†n b√¨nh th∆∞·ªùng trong cu·ªôc s·ªëng."
            ],
            
            'continue_offer': [
                "N·∫øu b·∫°n mu·ªën ti·∫øp t·ª•c tr√≤ chuy·ªán, t√¥i v·∫´n s·∫µn s√†ng l·∫Øng nghe v√† ƒë·ªìng h√†nh c√πng b·∫°n. üíô",
                "D√π kh√¥ng c√≥ v·∫•n ƒë·ªÅ nghi√™m tr·ªçng, t√¥i v·∫´n lu√¥n ·ªü ƒë√¢y ƒë·ªÉ b·∫°n c√≥ th·ªÉ t√¢m s·ª± b·∫•t c·ª© l√∫c n√†o.",
                "B·∫°n c√≥ th·ªÉ coi t√¥i nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n s·∫µn s√†ng l·∫Øng nghe - d√π ch·ªâ l√† nh·ªØng c√¢u chuy·ªán ƒë·ªùi th∆∞·ªùng. ü§ó"
            ],
            
            'positive_reinforcement': [
                "Vi·ªác b·∫°n ch·ªß ƒë·ªông quan t√¢m ƒë·∫øn s·ª©c kh·ªèe t√¢m th·∫ßn c·ªßa m√¨nh cho th·∫•y b·∫°n l√† ng∆∞·ªùi r·∫•t t·ª± gi√°c v√† c√≥ tr√°ch nhi·ªám v·ªõi b·∫£n th√¢n.",
                "Kh·∫£ nƒÉng nh·∫≠n bi·∫øt v√† chia s·∫ª c·∫£m x√∫c c·ªßa b·∫°n l√† m·ªôt ƒëi·ªÉm m·∫°nh tuy·ªát v·ªùi.",
                "B·∫°n c√≥ m·ªôt c√°ch ti·∫øp c·∫≠n r·∫•t t√≠ch c·ª±c v√† c·ªüi m·ªü v·ªõi nh·ªØng v·∫•n ƒë·ªÅ c√° nh√¢n."
            ],
            
            'future_guidance': [
                "H√£y ti·∫øp t·ª•c duy tr√¨ th√≥i quen chƒÉm s√≥c b·∫£n th√¢n nh∆∞ hi·ªán t·∫°i. N·∫øu trong t∆∞∆°ng lai c√≥ ƒëi·ªÅu g√¨ thay ƒë·ªïi, ƒë·ª´ng ng·∫ßn ng·∫°i t√¨m ki·∫øm s·ª± h·ªó tr·ª£.",
                "N·∫øu b·∫°n c·∫£m th·∫•y c·∫ßn thi·∫øt, b·∫°n lu√¥n c√≥ th·ªÉ quay l·∫°i ƒë√¢y ho·∫∑c t√¨m ki·∫øm s·ª± h·ªó tr·ª£ t·ª´ c√°c chuy√™n gia t√¢m l√Ω.",
                "H√£y nh·ªõ r·∫±ng vi·ªác chƒÉm s√≥c s·ª©c kh·ªèe t√¢m th·∫ßn l√† m·ªôt h√†nh tr√¨nh d√†i. B·∫°n ƒëang l√†m r·∫•t t·ªët!"
            ]
        }

    def should_trigger_closure(self, conversation_history: List[Dict], current_ai_analysis: Dict) -> Tuple[bool, str]:
        """
        Ki·ªÉm tra xem c√≥ n√™n k√≠ch ho·∫°t positive closure kh√¥ng
        
        Args:
            conversation_history: L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
            current_ai_analysis: K·∫øt qu·∫£ AI analysis hi·ªán t·∫°i
            
        Returns:
            (should_close, reason)
        """
        try:
            user_messages = [msg for msg in conversation_history if msg.get('role') == 'user']
            message_count = len(user_messages)
            
            # Rule 1: Ki·ªÉm tra s·ªë tin nh·∫Øn t·ªëi thi·ªÉu
            if message_count < self.config.min_messages_for_closure:
                return False, f"Ch∆∞a ƒë·ªß tin nh·∫Øn ({message_count}/{self.config.min_messages_for_closure})"
            
            # Rule 2: Force closure n·∫øu qu√° nhi·ªÅu tin nh·∫Øn
            if message_count >= self.config.max_messages_before_closure:
                return True, f"ƒê√£ ƒë·∫°t gi·ªõi h·∫°n tin nh·∫Øn ({message_count}), force closure"
            
            # Rule 3: Ki·ªÉm tra severity hi·ªán t·∫°i
            current_severity = current_ai_analysis.get('severity', 0.0)
            current_confidence = current_ai_analysis.get('confidence', 0.0)
            
            if current_severity > self.config.low_severity_threshold:
                return False, f"Severity qu√° cao ({current_severity})"
            
            if current_confidence < self.config.min_confidence_for_closure:
                return False, f"Confidence qu√° th·∫•p ({current_confidence})"
            
            # Rule 4: Ki·ªÉm tra pattern c·ªßa c√°c tin nh·∫Øn g·∫ßn ƒë√¢y
            recent_severities = self._extract_recent_severities(conversation_history)
            consecutive_low = self._count_consecutive_low_severity(recent_severities)
            
            if consecutive_low >= self.config.consecutive_low_severity_count:
                return True, f"Li√™n ti·∫øp {consecutive_low} tin nh·∫Øn c√≥ severity th·∫•p"
            
            # Rule 5: Ki·ªÉm tra content pattern - user c√≥ v·∫ª ·ªïn ƒë·ªãnh
            if self._detect_stable_pattern(conversation_history):
                return True, "Ph√°t hi·ªán pattern ·ªïn ƒë·ªãnh trong cu·ªôc tr√≤ chuy·ªán"
            
            return False, "Ch∆∞a ƒë·ªß ƒëi·ªÅu ki·ªán closure"
            
        except Exception as e:
            logger.error(f"Error checking closure trigger: {e}")
            return False, f"L·ªói ki·ªÉm tra: {e}"

    def generate_closure_message(self, conversation_history: List[Dict], ai_analysis: Dict) -> str:
        """
        T·∫°o tin nh·∫Øn closure t√≠ch c·ª±c
        
        Args:
            conversation_history: L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
            ai_analysis: K·∫øt qu·∫£ AI analysis
            
        Returns:
            Closure message
        """
        try:
            # Ph√¢n t√≠ch context ƒë·ªÉ t·∫°o message ph√π h·ª£p
            context_type = ai_analysis.get('type', 'normal_worry')
            severity = ai_analysis.get('severity', 0.0)
            message_count = len([msg for msg in conversation_history if msg.get('role') == 'user'])
            
            # Ch·ªçn template d·ª±a tr√™n context
            reassurance = self._select_template('general_reassurance', context_type)
            reinforcement = self._select_template('positive_reinforcement', context_type)
            continue_offer = self._select_template('continue_offer', context_type)
            guidance = self._select_template('future_guidance', context_type)
            
            # T·∫°o message k·∫øt h·ª£p
            closure_message = f"""
{reassurance}

{reinforcement}

{continue_offer}

{guidance}

---
üí° **T√≥m t·∫Øt ƒë√°nh gi√°:** Sau {message_count} tin nh·∫Øn, t√¥i kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu nghi√™m tr·ªçng n√†o c·∫ßn can thi·ªáp chuy√™n m√¥n. M·ª©c ƒë·ªô lo √¢u/stress c·ªßa b·∫°n ·ªü ng∆∞·ª°ng b√¨nh th∆∞·ªùng ({severity:.1f}/1.0).
            """.strip()
            
            return closure_message
            
        except Exception as e:
            logger.error(f"Error generating closure message: {e}")
            return self._get_fallback_closure_message()

    def _extract_recent_severities(self, conversation_history: List[Dict], window_size: int = 5) -> List[float]:
        """Tr√≠ch xu·∫•t severity scores c·ªßa c√°c tin nh·∫Øn g·∫ßn ƒë√¢y"""
        severities = []
        
        # Gi·∫£ ƒë·ªãnh r·∫±ng metadata v·ªÅ AI analysis ƒë∆∞·ª£c l∆∞u trong conversation state
        # Ho·∫∑c c√≥ th·ªÉ re-analyze c√°c tin nh·∫Øn g·∫ßn ƒë√¢y
        for msg in conversation_history[-window_size:]:
            if msg.get('role') == 'user':
                # L·∫•y severity t·ª´ metadata ho·∫∑c re-analyze
                severity = msg.get('ai_analysis', {}).get('severity', 0.0)
                severities.append(severity)
        
        return severities

    def _count_consecutive_low_severity(self, severities: List[float]) -> int:
        """ƒê·∫øm s·ªë tin nh·∫Øn li√™n ti·∫øp c√≥ severity th·∫•p"""
        consecutive = 0
        
        for severity in reversed(severities):  # ƒê·∫øm ng∆∞·ª£c t·ª´ tin nh·∫Øn m·ªõi nh·∫•t
            if severity <= self.config.low_severity_threshold:
                consecutive += 1
            else:
                break
        
        return consecutive

    def _detect_stable_pattern(self, conversation_history: List[Dict]) -> bool:
        """
        Ph√°t hi·ªán pattern ·ªïn ƒë·ªãnh trong cu·ªôc tr√≤ chuy·ªán
        - User kh√¥ng mention c√°c t·ª´ kh√≥a nghi√™m tr·ªçng
        - Tone t√≠ch c·ª±c ho·∫∑c trung t√≠nh
        - Kh√¥ng c√≥ escalation
        """
        try:
            user_messages = [msg['content'] for msg in conversation_history if msg.get('role') == 'user']
            
            # T·ª´ kh√≥a ch·ªâ s·ª± ·ªïn ƒë·ªãnh
            stable_keywords = [
                '·ªïn', 'b√¨nh th∆∞·ªùng', 'kh√¥ng sao', 't·ªët', 'kh√° ·ªïn', 'ƒë∆∞·ª£c r·ªìi',
                'c≈©ng t·∫°m', 'kh√¥ng c√≥ g√¨', 'fine', 'okay', 'good', 'normal'
            ]
            
            # T·ª´ kh√≥a nghi√™m tr·ªçng
            serious_keywords = [
                't·ª± t·ª≠', 'ch·∫øt', 'kh√¥ng th·ªÉ ch·ªãu n·ªïi', 'tuy·ªát v·ªçng', 'kh√¥ng c√≤n hy v·ªçng',
                'suicide', 'die', 'hopeless', 'can\'t take it', 'end it all'
            ]
            
            stable_count = 0
            serious_count = 0
            
            for message in user_messages[-3:]:  # Ch·ªâ x√©t 3 tin nh·∫Øn g·∫ßn nh·∫•t
                message_lower = message.lower()
                
                for keyword in stable_keywords:
                    if keyword in message_lower:
                        stable_count += 1
                        break
                
                for keyword in serious_keywords:
                    if keyword in message_lower:
                        serious_count += 1
                        break
            
            # Pattern ·ªïn ƒë·ªãnh n·∫øu c√≥ keyword stable v√† kh√¥ng c√≥ keyword serious
            return stable_count > 0 and serious_count == 0
            
        except Exception as e:
            logger.error(f"Error detecting stable pattern: {e}")
            return False

    def _select_template(self, template_type: str, context_type: str) -> str:
        """Ch·ªçn template ph√π h·ª£p v·ªõi context"""
        templates = self.closure_templates.get(template_type, [])
        
        if not templates:
            return ""
        
        # Logic ch·ªçn template d·ª±a tr√™n context_type
        if context_type in ['normal_worry', 'situational_stress']:
            return templates[0]  # Template v·ªÅ lo l·∫Øng b√¨nh th∆∞·ªùng
        elif context_type in ['normal_sadness']:
            return templates[1] if len(templates) > 1 else templates[0]
        else:
            return templates[-1]  # Template chung

    def _get_fallback_closure_message(self) -> str:
        """Message closure d·ª± ph√≤ng khi c√≥ l·ªói"""
        return """
Qua cu·ªôc tr√≤ chuy·ªán n√†y, t√¥i th·∫•y b·∫°n c√≥ v·∫ª ƒëang ·ªïn v·ªÅ m·∫∑t tinh th·∫ßn. üòä

N·∫øu b·∫°n mu·ªën ti·∫øp t·ª•c chia s·∫ª, t√¥i v·∫´n s·∫µn s√†ng l·∫Øng nghe. Vi·ªác b·∫°n quan t√¢m ƒë·∫øn s·ª©c kh·ªèe t√¢m th·∫ßn c·ªßa m√¨nh l√† ƒëi·ªÅu r·∫•t t√≠ch c·ª±c!

H√£y nh·ªõ r·∫±ng n·∫øu trong t∆∞∆°ng lai c√≥ b·∫•t k·ª≥ thay ƒë·ªïi n√†o, b·∫°n lu√¥n c√≥ th·ªÉ t√¨m ki·∫øm s·ª± h·ªó tr·ª£ khi c·∫ßn thi·∫øt.
        """.strip()

    def update_conversation_with_closure(self, conversation_history: List[Dict], closure_message: str) -> Dict:
        """
        C·∫≠p nh·∫≠t conversation state v·ªõi closure
        
        Args:
            conversation_history: L·ªãch s·ª≠ hi·ªán t·∫°i
            closure_message: Message closure
            
        Returns:
            Updated conversation dict
        """
        closure_entry = {
            'role': 'bot',
            'content': closure_message,
            'timestamp': datetime.now().isoformat(),
            'type': 'positive_closure',
            'metadata': {
                'closure_triggered': True,
                'closure_time': datetime.now().isoformat(),
                'assessment_result': 'no_serious_issues',
                'user_can_continue': True
            }
        }
        
        updated_history = conversation_history + [closure_entry]
        
        return {
            'history': updated_history,
            'state': {
                'closure_applied': True,
                'closure_type': 'positive_reassurance',
                'user_assessment': 'stable',
                'continue_chatting_allowed': True
            },
            'metadata': {
                'type': 'positive_closure',
                'should_show_continue_option': True,
                'assessment_summary': 'Kh√¥ng ph√°t hi·ªán v·∫•n ƒë·ªÅ nghi√™m tr·ªçng',
                'recommendations': [
                    'Ti·∫øp t·ª•c duy tr√¨ th√≥i quen chƒÉm s√≥c b·∫£n th√¢n',
                    'T√¨m ki·∫øm h·ªó tr·ª£ khi c·∫ßn thi·∫øt',
                    'Quan t√¢m ƒë·∫øn s·ª©c kh·ªèe t√¢m th·∫ßn l√† ƒëi·ªÅu t√≠ch c·ª±c'
                ]
            }
        }

# Integration v·ªõi existing chat engine
class PositiveClosureIntegration:
    """T√≠ch h·ª£p Positive Closure v√†o chat engine hi·ªán t·∫°i"""
    
    def __init__(self, chat_engine, closure_manager: Optional[PositiveClosureManager] = None):
        self.chat_engine = chat_engine
        self.closure_manager = closure_manager or PositiveClosureManager()

    def enhanced_process_message(self, message: str, history: List[Dict], state: Dict, use_ai: bool = True) -> Dict:
        """
        Enhanced message processing v·ªõi positive closure check
        """
        # X·ª≠ l√Ω message nh∆∞ b√¨nh th∆∞·ªùng
        result = self.chat_engine.process_message(message, history, state, use_ai)
        
        # Ki·ªÉm tra c√≥ c·∫ßn positive closure kh√¥ng
        if not state.get('closure_applied', False):
            current_ai_analysis = state.get('last_ai_analysis', {})
            updated_history = result.get('history', history)
            
            should_close, reason = self.closure_manager.should_trigger_closure(
                updated_history, current_ai_analysis
            )
            
            if should_close:
                # T·∫°o closure message
                closure_message = self.closure_manager.generate_closure_message(
                    updated_history, current_ai_analysis
                )
                
                # C·∫≠p nh·∫≠t result v·ªõi closure
                closure_update = self.closure_manager.update_conversation_with_closure(
                    updated_history, closure_message
                )
                
                # Merge closure v√†o result
                result['message'] = closure_message
                result['history'] = closure_update['history']
                result['state'].update(closure_update['state'])
                result['metadata'].update(closure_update['metadata'])
                result['metadata']['closure_reason'] = reason
        
        return result

# Usage example trong chat engine
def integrate_positive_closure_to_chat_engine():
    """
    H∆∞·ªõng d·∫´n t√≠ch h·ª£p v√†o chat engine hi·ªán t·∫°i
    """
    # 1. Th√™m v√†o src/core/chat_engine.py
    
    # from positive_closure import PositiveClosureManager
    
    # class ChatEngine:
    #     def __init__(self):
    #         # ... existing code ...
    #         self.closure_manager = PositiveClosureManager()
    
    #     def process_message(self, message, history, state, use_ai=True):
    #         # ... existing logic ...
    #         
    #         # Th√™m closure check tr∆∞·ªõc khi return
    #         if not state.get('closure_applied', False):
    #             should_close, reason = self.closure_manager.should_trigger_closure(
    #                 final_history, ai_context
    #             )
    #             
    #             if should_close:
    #                 closure_message = self.closure_manager.generate_closure_message(
    #                     final_history, ai_context
    #                 )
    #                 
    #                 # Override response v·ªõi closure message
    #                 return {
    #                     'message': closure_message,
    #                     'history': final_history + [{'role': 'bot', 'content': closure_message}],
    #                     'state': {**state, 'closure_applied': True},
    #                     'metadata': {
    #                         'type': 'positive_closure',
    #                         'closure_reason': reason,
    #                         'continue_option': True
    #                     }
    #                 }
    #         
    #         return result
    
    pass

# Configuration c√≥ th·ªÉ t√πy ch·ªânh
DEFAULT_CONFIG = ClosureConfig(
    min_messages_for_closure=6,
    max_messages_before_closure=12,
    low_severity_threshold=0.3,
    consecutive_low_severity_count=3,
    min_confidence_for_closure=0.6
)

# Factory function
def create_positive_closure_manager(config: Optional[Dict] = None) -> PositiveClosureManager:
    """T·∫°o PositiveClosureManager v·ªõi config t√πy ch·ªânh"""
    if config:
        closure_config = ClosureConfig(**config)
    else:
        closure_config = DEFAULT_CONFIG
    
    return PositiveClosureManager(closure_config)